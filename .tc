;;; -*-emacs-lisp-*- This file is automatically created
(setq tcode-data-directory "/Users/mrty/tcode/")
; (setq tcode-key-layout "qwerty")
(setq tcode-key-layout "qwerty-us-shift")

(if t
    (progn
      (setq tcode-default-input-method "japanese-TUTO-Code")
      (setq tcode-mazegaki-dictionary-name "mazegaki-trad.dic"))
  (progn
    (setq tcode-default-input-method "japanese-TUT-Code")
    (setq tcode-mazegaki-dictionary-name "mazegaki.dic")))

;;; ●変数の設定
;; 起動時に T-Code で使うすべてのライブラリをロードする
;(setq tcode-load-immediate t)
;; 部首変換で後置型を使用する
(setq tcode-use-postfix-bushu-as-default t)
;; 部首辞書を tc.el ロード時に読み込む
;(setq tcode-bushu-on-demand 0)
;; 余計なメッセージを出さないようにする
;(setq tcode-verbose-message nil)
;; ヘルプ用のウィンドウの大きさを自動的に調整する
(setq tcode-adjust-window-for-help t)
;; インクリメンタルサーチで行の折り返しを有効にする
(setq tcode-isearch-enable-wrapped-search t)
;; .tc-record に記録しない
;(setq tcode-record-file-name nil)
;; auto-help が表示されるまでの時間を変更する
(setq tcode-display-help-delay 1)

(defvar tutcode-space-code 40)

(add-hook 'tcode-ready-hook
          (function
           (lambda ()
             ; (tcode-set-key "\\" ’tcode-inactivate-and-self-insert)
             ; (tcode-set-key " " ’tcode-inactivate-and-self-insert)
             (tcode-set-key " " nil tutcode-space-code)
                                 )))
;;; ●TUT-Code のための設定
;; テーブルの指定
;(if (tcode-mule-3-p)
;    (set-default-input-method "Japanese" "TUT-Code")
;  (setq tcode-table-file-name "tutc-tbl"))
;; ストローク表を3段表示にする
(setq tcode-help-draw-top-keys nil)
;; テーブルを読んだ後に行う設定
(add-hook 'tcode-after-load-table-hook
	  (function
	   (lambda ()
	     ;; 「もう一つの」外字を「\」に割り当てる
	     (set-tcode-mode-key "\\"
				 'tcode-insert-ya-outset)
	     ;; カタカナモードのトグルを「'」に割り当てる
	     (set-tcode-mode-key "'"
				 'tcode-toggle-katakana-mode))))

;(add-hook 'tcode-after-load-table-hook
;  (function
;   (lambda ()
;     (setq
;      ;; 「ひらがなモード」のインジケーターを「あ」にする
;      tcode-hiragana-mode-indicator " あ"
;      ;; 「カタカナモード」のインジケーターを「ア」にする
;      tcode-katakana-mode-indicator " ア"))))

(defvar tutcode-2-stroke-symbol-tables
  '("1" "2" "3" "4" "5" "6" "7" "8" "9" "0"
    "“" "〒" "ー" "【" "「"   "」" "】" "…" "・" "”"
    "‘" "☆" tcode-touten tcode-kuten "『"	  "』" "々" "※" "＼" "’"
    "〆" "§" "○" "÷" "←"   "→" "×" "《" "》" "／"))


(add-hook 'tcode-after-load-table-hook
          (function
           (lambda ()
             (if (eq tcode-input-method 'tutcode)
                 (progn
                   (setq tcode-key-num 41
                         tcode-ext-keys '(32))
                   (loop for x in tutcode-2-stroke-symbol-tables
                         for i from 0
                         ;; do (princ (format "%s, %s\n" i x))
                         do (tcode-set-action-to-table (list i tutcode-space-code) x)
                         )
                   ;; 「SPC」space
                   (tcode-set-action-to-table
                    '(40)
                    " ")
                   ;; 「alt 」paren
                   ;; (tcode-set-action-to-table
                   ;;  '(20 28 14 40)
                   ;;  "（")
                   ;; 「aly 」paren
                   ;; (tcode-set-action-to-table
                   ;;  '(20 28 15 40)
                   ;;  "）")
                   (loop for ls in '((23 . "（") (22 . "〔") (21 . "［") (20 . "【") (13 . "｛")
                                     )
                         for rs in '((26 . "）") (27 . "）") (28 . "］") (29 . "】") (16 . "｝"))
                         ; do (princ (format "%s, %s\n" i x))
                         do (tcode-set-action-to-table (list 20 28 14 (car ls) 40) (cdr ls))
                         do (tcode-set-action-to-table (list 20 28 15 (car rs) 40) (cdr rs))
                         )
                   )))))
;(add-hook 'tcode-after-load-table-hook
;  (function
;   (lambda ()
;     (if (eq tcode-input-method 'tutcode)
;	 (progn
;	   ;; 「ali」直前のひらがなをカタカナに
;	   (tcode-set-action-to-table
;			     '(20 28 17)
;			     'tcode-katakana-previous-char)
;	   ;; 「aly」交ぜ書き辞書からの読みの表示
;	   (tcode-set-action-to-table
;			     '(20 28 15)
;			     'tcode-mazegaki-show-yomi-region)
;	   ;; 「ald」区点コードによる入力
;	   (tcode-set-action-to-table
;			     '(20 28 22)
;			     'tcode-insert-kanji-by-kuten-code)
;	   ;; 「alf」JISコードによる入力
;	   (tcode-set-action-to-table
;			     '(20 28 23)
;			     'tcode-insert-kanji-by-jis-code)
;	   ;; 「alk」交ぜ書き辞書の項目の一括削除
;	   (tcode-set-action-to-table
;			     '(20 28 27)
;			     'tcode-mazegaki-delete-kanji-from-dictionary)
;	   ;; 「al1」で「:-)」
;	   (tcode-set-action-to-table
;			     '(20 28 0) ":-)")
;	   ;; 「al0」で「(^_^)」
;	   (tcode-set-action-to-table
;			     '(20 28 9) "(^_^)"))))))

;;; ●T-Code モードに初めて入ったときに行う設定
;(add-hook 'tcode-ready-hook
;	  (function
;	   (lambda ()
;	     ;; T-Code モードに最初に入った時に交ぜ書き変換の辞書を読み込む
;	     (save-excursion
;	       (tcode-mazegaki-switch-to-dictionary)))))

;;; ●交ぜ書き変換に関する設定
;(add-hook 'tcode-mazegaki-init-hook
;	  '(lambda ()
;	     ;; 候補選択に使用するキーを三段に、順序を“増田式”にする
;	     (setq tcode-mazegaki-priority-list
;                   ;; キー配置
;		   ;;  0  1  2  3  4    5  6  7  8  9
;		   ;; 10 11 12 13 14   15 16 17 18 19
;		   ;; 20 21 22 23 24   25 26 27 28 29
;		   ;; 30 31 32 33 34   35 36 37 38 39
;		   '(27 22 26 23 25 24 28 21 29 20 
;			17 12 16 13 15 14 18 11 19 10
;			   37 32 36 33 35 34 38 31 39 30))
;	     ;; 辞書の読みの長さを設定
;	     (setq tcode-mazegaki-yomi-max 8)
;	     ;; 学習(候補の入れ替え)をしないようにする。
;	     (setq tcode-mazegaki-gakusyu-kouho-offset 10000)))

;;; ~/.tc ends here
